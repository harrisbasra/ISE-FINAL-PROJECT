//-------------------------  LIBRARIES ---------------------------//
#include<iostream>;
#include<fstream>;
#include<cstring>;
#include<string>;
//------------------------ STD LIBRARY --------------------------//
using namespace std;
//------------------ GLOBAL MEMORY 1 (C.INFO)--------------------//
int customerinfo_customerid[4] = {};
long long customerinfo_cnicnumber[4] = {};
string customerinfo_firstname[4] = {};
string customerinfo_secondname[4] = {};
string customerinfo_address1[4] = {};
string customerinfo_address2[4] = {};
unsigned long customerinfo_phonenumber[4] = {};
char customerinfo_customertype[4] = {};
char customerinfo_metretype[4] = {};
long customerinfo_date[4] = {};
int customerinfo_unitsconsumed[4] = {};
int customerinfo_peakhourunits[4] = {};
//-------------------------- LOADERS 1--------------------------//
char commastorer = ',';
ifstream readhead;
//////////////////////////////////////////////////////////////////
//-------------- GLOBAL MEMORY 2 (TarrifTaxInfo)----------------//
string tarriftaxinfo_metrename[4] = {};
int tarriftaxinfo_regunitprice[4] = {};
int tarriftaxinfo_peakunitprice[4] = {};
int tarriftaxinfo_taxes[4] = {};
int tarriftaxinfo_fixedcharges[4] = {};
//-------------------------- LOADERS 2--------------------------//
ifstream readhead2;
//////////////////////////////////////////////////////////////////
//-------------- GLOBAL MEMORY 3 (TarrifTaxInfo)----------------//
long nadradb_issuedate[4] = {};
long nadradb_expirydate[4] = {};
//-------------------------- LOADERS 3--------------------------//
ifstream readhead3;
long long waste;
//////////////////////////////////////////////////////////////////
//---------------------- LOADER MECHANISMS ---------------------//
int main() {
	readhead.open("CustomerInfo.txt");
	for (int kk = 0; kk < 4; kk++) {
		readhead >> customerinfo_customerid[kk];
		readhead >> commastorer;
		readhead >> customerinfo_cnicnumber[kk];
		readhead >> commastorer;
		readhead >> customerinfo_firstname[kk];
		readhead >> customerinfo_secondname[kk];
		readhead >> commastorer;
		readhead >> customerinfo_address1[kk];
		readhead >> customerinfo_address2[kk];
		readhead >> commastorer;
		readhead >> customerinfo_phonenumber[kk];
		readhead >> commastorer;
		readhead >> customerinfo_customertype[kk];
		readhead >> commastorer;
		readhead >> customerinfo_metretype[kk];
		readhead >> commastorer;
		readhead >> customerinfo_date[kk];
		readhead >> commastorer;
		readhead >> customerinfo_unitsconsumed[kk];
		readhead >> commastorer;
		readhead >> customerinfo_peakhourunits[kk];
	}
	readhead.close();
	readhead2.open("TarriffTaxInfo.txt");
	for (int kk = 0; kk < 4; kk++) {
		readhead2 >> tarriftaxinfo_metrename[kk];
		readhead2 >> commastorer;
		readhead2 >> tarriftaxinfo_regunitprice[kk];
		readhead2 >> commastorer;
		if(kk==2||kk==3)
		readhead2 >> tarriftaxinfo_peakunitprice[kk];
		readhead2 >> commastorer;
		readhead2 >> tarriftaxinfo_taxes[kk];
		readhead2 >> commastorer;
		readhead2 >> tarriftaxinfo_fixedcharges[kk];
	}
	readhead2.close();
	readhead3.open("NadraDB.txt");
	for (int kk = 0; kk < 4; kk++) {
		readhead3 >> nadradb_issuedate[kk];
		readhead3 >> commastorer;
		readhead3 >> waste;
		readhead3 >> commastorer;
		readhead3 >> nadradb_expirydate[kk];
	}
	readhead3.close();

}
